{"version":3,"sources":["components/Header/Header.js","components/Wrapper/wrapper.js","components/Table/Table.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Wrapper","props","children","sortTypes","up","class","fn","a","b","age","down","default","Table","handleOnClick","nextSort","currentSort","state","setState","alert","employees","id","name","email","this","sort","map","employee","index","key","Object","keys","onClick","toUpperCase","renderTableHeader","renderTableData","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAWeA,MATf,WACI,OACI,yBAAKC,UAAU,UACf,kDACA,qE,MCAOC,MAJf,SAAkBC,GACd,OAAO,0BAAMF,UAAU,WAAWE,EAAMC,W,4BCCtCC,G,MAAY,CACdC,GAAI,CACAC,MAAO,UACPC,GAAI,SAACC,EAAEC,GAAH,OAASD,EAAEE,IAAMD,EAAEC,MAE3BC,KAAM,CACFL,MAAO,YACPC,GAAI,SAACC,EAAEC,GAAH,OAASA,EAAEC,IAAMF,EAAEE,MAE3BE,QAAS,CACLN,MAAO,OACPC,GAAI,SAACC,EAAEC,GAAH,OAASD,MAoENK,E,kDAhEX,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAkCTY,cAAgB,WAAM,IAEfC,EADIC,EAAgB,EAAKC,MAArBD,YAGW,SAAhBA,EAAwBD,EAAW,KACd,OAAhBC,EAAsBD,EAAW,UACjB,YAAhBC,IAA2BD,EAAW,QAC9C,EAAKG,SAAS,CACVF,YAAaD,IAEjBI,MAAM,aA3CN,EAAKF,MAAQ,CACTG,UAAW,CACP,CAACC,GAAG,EAAGC,KAAM,aAAcZ,IAAK,GAAIa,MAAO,wBAC3C,CAACF,GAAG,EAAGC,KAAM,WAAYZ,IAAK,GAAIa,MAAO,sBACzC,CAACF,GAAG,EAAGC,KAAM,UAAWZ,IAAK,GAAIa,MAAO,qBACxC,CAACF,GAAG,EAAGC,KAAM,QAASZ,IAAK,GAAIa,MAAO,oBAE1CP,YAAa,WATF,E,8DAef,OADAQ,KAAKP,MAAMG,UAAUK,KAAKrB,EAAUoB,KAAKP,MAAMD,aAAaT,IACrDiB,KAAKP,MAAMG,UAAUM,KAAI,SAACC,EAAUC,GAAW,IAC3CP,EAAyBM,EAAzBN,GAAIC,EAAqBK,EAArBL,KAAMZ,EAAeiB,EAAfjB,IAAKa,EAAUI,EAAVJ,MACvB,OACG,wBAAIM,IAAKR,GACN,4BAAKA,GACL,4BAAKC,GACL,4BAAKZ,GACL,4BAAKa,S,0CAMI,IAAD,OAEjB,OADaO,OAAOC,KAAKP,KAAKP,MAAMG,UAAU,IAChCM,KAAI,SAACG,EAAKD,GACrB,OAAO,wBAAIC,IAAKD,EAAOI,QAAW,EAAKlB,eAAgBe,EAAII,oB,+BAkB9D,OACG,6BACG,wBAAIZ,GAAG,SAAP,qBACA,2BAAOA,GAAG,aACP,+BACG,4BAAKG,KAAKU,qBACTV,KAAKW,yB,GAxDNC,aCILC,MAhBf,WAEQ,OACI,6BACG,yBAAKrC,UAAY,aACZ,yBAAKA,UAAY,OACb,kBAAC,EAAD,UCWTsC,MAff,WACE,OAEG,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACG,kBAAC,EAAD,SCFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53389d14.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\nfunction Header() {\r\n    return(\r\n        <div className=\"header\">\r\n        <h1>Employee Directory</h1>\r\n        <p>Browse through the list of Employees</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\nimport \"./style.css\";\r\nfunction Wrapper (props){\r\n    return <main className=\"wrapper\">{props.children}</main>\r\n}\r\n\r\nexport default Wrapper","import React, { Component } from 'react'\r\nimport \"./style.css\"\r\n\r\n\r\nconst sortTypes = {\r\n    up: {\r\n        class: 'sort-up',\r\n        fn: (a,b) => a.age - b.age\r\n    },\r\n    down: {\r\n        class: 'sort-down',\r\n        fn: (a,b) => b.age - a.age\r\n    },\r\n    default: {\r\n        class: 'sort',\r\n        fn: (a,b) => a\r\n    }\r\n}\r\nclass Table extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            employees: [\r\n                {id:1, name: 'Jayquellin', age: 23, email: \"Jayquellin@email.com\" },\r\n                {id:2, name: 'Belaakay', age: 21, email: \"Belaakay@email.com\" },\r\n                {id:3, name: 'De-nice', age: 22, email: \"De-nice@email.com\" },\r\n                {id:4, name: 'AAron', age: 25, email: \"AAron@email.com\" },\r\n            ],\r\n            currentSort: 'default'\r\n        } \r\n    }\r\n\r\n    renderTableData() {\r\n        this.state.employees.sort(sortTypes[this.state.currentSort].fn)\r\n        return this.state.employees.map((employee, index) => {\r\n           const { id, name, age, email } = employee //destructuring\r\n           return (\r\n              <tr key={id}>\r\n                 <td>{id}</td>\r\n                 <td>{name}</td>\r\n                 <td>{age}</td>\r\n                 <td>{email}</td>\r\n              </tr>\r\n           )\r\n        })\r\n     }\r\n  \r\n     renderTableHeader() {\r\n        let header = Object.keys(this.state.employees[0])\r\n        return header.map((key, index) => {\r\n           return <th key={index} onClick = {this.handleOnClick}>{key.toUpperCase()}</th>\r\n        })\r\n     }\r\n\r\n     handleOnClick = () =>{\r\n        const { currentSort } = this.state;\r\n        let nextSort;\r\n        \r\n        if(currentSort === 'down') nextSort = 'up';\r\n        else if(currentSort === 'up') nextSort = 'default';\r\n        else if(currentSort === 'default') nextSort = 'down';\r\n        this.setState({\r\n            currentSort: nextSort\r\n        })\r\n        alert(\"Clicked!\")\r\n     }\r\n\r\n     render() {\r\n        return (\r\n           <div>\r\n              <h1 id='title'>Current Employees</h1>\r\n              <table id='employees'>\r\n                 <tbody>\r\n                    <tr>{this.renderTableHeader()}</tr>\r\n                    {this.renderTableData()}\r\n                 </tbody>\r\n              </table>\r\n           </div>\r\n        )\r\n     }\r\n  }\r\n\r\n\r\nexport default Table","\r\nimport React  from 'react'\r\n\r\n\r\nimport Table from \"../components/Table/Table\"\r\n\r\nfunction Main(){\r\n    \r\n        return(\r\n            <div>\r\n               <div className = \"container\">\r\n                    <div className = \"row\">\r\n                        <Table/>\r\n\r\n                        \r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\nexport default Main","import React from 'react';\n\n\nimport Header from \"./components/Header/Header\"\nimport Wrapper from \"./components/Wrapper/wrapper\"\nimport Main from \"./pages/Main\"\n\n\nfunction App() {\n  return (\n   \n     <div>\n       <Header/>\n       <Wrapper>\n          <Main>\n\n          </Main>\n       </Wrapper>\n     </div>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}